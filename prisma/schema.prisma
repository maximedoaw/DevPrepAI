// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// schema.prisma - Version optimisée

enum SubscriptionTier {
  FREE
  PREMIUM
  EXPERT
}

enum Role {
  ENTERPRISE
  BOOTCAMP
  SCHOOL
  CANDIDATE
  RECRUITER
  CAREER_CHANGER
}

enum Domain {
  DEVELOPMENT
  DATA_SCIENCE
  FINANCE
  BUSINESS
  ENGINEERING
  DESIGN
  DEVOPS
  CYBERSECURITY
  MARKETING
  PRODUCT
  ARCHITECTURE
  MOBILE
  WEB
  COMMUNICATION
  MANAGEMENT
  EDUCATION
  HEALTH
}

enum Difficulty {
  JUNIOR
  MID
  SENIOR
}

enum QuizType {
  QCM 
  MOCK_INTERVIEW
  SOFT_SKILLS
  TECHNICAL
}

enum InterviewRoomType {
  TECH
  HR
  EXECUTIVE
}

model User {
  id                 String         @id @default(cuid())
  email              String         @unique
  kindeId            String?        @unique
  firstName          String?
  lastName           String?
  createdAt          DateTime       @default(now())
  updatedAt          DateTime       @updatedAt
  credits            Int            @default(5000)
  matchingJobs       Int            @default(0)
  role               Role           @default(CANDIDATE)
  domains            Domain[]       // Domaines sélectionnés
  subscription       Subscription?
  quizResults        QuizResult[]
  skillAnalyses      SkillAnalysis[]
  progressTracking   ProgressTracking[]
  chatSessions       ChatSession[]
  interviewRooms     InterviewRoom[]
  voiceInterviews    VoiceInterview[]
  recommendations    Recommendation[]

  @@index([createdAt])
  @@index([role])
  @@map("users")
}

model Subscription {
  id               String          @id @default(cuid())
  userId           String          @unique
  user             User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  tier             SubscriptionTier @default(FREE)
  startDate        DateTime        @default(now())
  endDate          DateTime?
  isActive         Boolean         @default(true)
  stripeCustomerId String?
  stripeSubscriptionId String?
  features         Json?

  @@index([isActive])
  @@index([endDate])
  @@map("subscriptions")
}

model Quiz {
  id          String     @id @default(cuid())
  title       String
  description String?
  type        QuizType
  questions   Json
  difficulty  Difficulty @default(JUNIOR)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  company     String
  technology  String[]
  results     QuizResult[]
  duration    Int
  totalPoints Int

  @@index([type])
  @@index([difficulty])
  @@index([technology])
  @@index([createdAt])
  @@map("quizzes")
}

model QuizResult {
  id          String     @id @default(cuid())
  userId      String
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  quizId      String
  quiz        Quiz       @relation(fields: [quizId], references: [id], onDelete: Cascade)
  skillAnalysis SkillAnalysis[]
  score       Float
  answers     Json
  analysis    String
  duration    Int?
  completedAt DateTime   @default(now())

  @@index([userId, completedAt])
  @@index([quizId])
  @@index([score])
  @@index([completedAt])
  @@map("quiz_results")
}

model SkillAnalysis {
  id              String     @id @default(cuid())
  userId          String
  user            User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  quizResultId    String?
  quizResult      QuizResult? @relation(fields: [quizResultId], references: [id], onDelete: Cascade)
  skills          Json
  aiFeedback      String?
  improvementTips String[]
  analyzedAt      DateTime   @default(now())

  @@index([userId, analyzedAt])
  @@index([quizResultId])
  @@map("skill_analyses")
}

model ProgressTracking {
  id          String     @id @default(cuid())
  userId      String
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  metric      String
  value       Float
  date        DateTime   @default(now())
  context     Json?

  @@index([userId, metric, date])
  @@index([date])
  @@map("progress_tracking")
}

model Recommendation {
  id           String     @id @default(cuid())
  userId       String
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  source       String
  content      String
  vector       Json?
  relatedItems Json?
  weight       Float      @default(1.0)
  viewed       Boolean    @default(false)
  createdAt    DateTime   @default(now())

  @@index([userId, viewed])
  @@index([createdAt])
  @@map("recommendations")
}

model ChatSession {
  id           String     @id @default(cuid())
  userId       String
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  messages     Json
  sessionType  String
  startedAt    DateTime   @default(now())
  lastActivity DateTime   @updatedAt
  feedback     Json?

  @@index([userId, lastActivity])
  @@map("chat_sessions")
}

model InterviewRoom {
  id           String           @id @default(cuid())
  userId       String
  user         User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  roomType     InterviewRoomType
  roomData     Json
  participants Json?
  startedAt    DateTime         @default(now())
  endedAt      DateTime?
  recordingUrl String?

  @@index([userId, startedAt])
  @@map("interview_rooms")
}

model VoiceInterview {
  id              String     @id @default(cuid())
  userId          String
  user            User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  technologies    String[]
  context         String
  duration        Int
  conversationId  String?
  transcription   Json?
  actualDuration  Int?
  status          String     @default("pending")
  startedAt       DateTime   @default(now())
  endedAt         DateTime?
  feedback        Json?
  score           Float?

  @@index([userId, startedAt])
  @@index([status])
  @@map("voice_interviews")
}