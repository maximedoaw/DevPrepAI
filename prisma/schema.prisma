// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// schema.prisma - Version optimisée
enum SubscriptionTier {
  FREE
  PREMIUM
  EXPERT
}

enum JobType {
  FULL_TIME
  PART_TIME
  CONTRACT
  INTERNSHIP
  MISSION
  CDI
  STAGE
}

enum WorkMode {
  REMOTE
  ON_SITE
  HYBRID 
}

enum Role {
  ENTERPRISE
  BOOTCAMP
  SCHOOL
  CANDIDATE
  RECRUITER
  CAREER_CHANGER
}

enum Domain {
  MACHINE_LEARNING
  DEVELOPMENT
  DATA_SCIENCE
  FINANCE
  BUSINESS
  ENGINEERING
  DESIGN
  DEVOPS
  CYBERSECURITY
  MARKETING
  PRODUCT 
  ARCHITECTURE
  MOBILE
  WEB
  COMMUNICATION
  MANAGEMENT
  EDUCATION
  HEALTH
}

enum PortfolioTemplate {
  CLASSIC
  MODERN
  CORPORATE
  TECH
  MINIMAL
  THREE_D
}

enum Difficulty {
  JUNIOR
  MID
  SENIOR
}

enum QuizType {
  QCM 
  MOCK_INTERVIEW
  SOFT_SKILLS
  TECHNICAL
}

enum InterviewRoomType {
  TECH
  HR
  EXECUTIVE
}

model User {
  id               String              @id @default(cuid())
  email            String              @unique
  kindeId          String?             @unique
  firstName        String?
  lastName         String?
  createdAt        DateTime            @default(now())
  updatedAt        DateTime            @updatedAt
  credits          Int                 @default(5000)
  matchingJobs     Int                 @default(0)
  skills           String[]
  role             Role                @default(CANDIDATE)
  domains          Domain[]

  
  // Relations
  subscription     Subscription?
  quizResults      QuizResult[]
  skillAnalyses    SkillAnalysis[]
  progressTracking ProgressTracking[]
  chatSessions     ChatSession[]
  interviewRooms   InterviewRoom[]
  voiceInterviews  VoiceInterview[]
  recommendations  Recommendation[]
  applications     Application[]       @relation("UserApplications")
  portfolio        Portfolio[]
  jobPostings      JobPosting[]        @relation("UserJobPostings")
  JobQuizResults   JobQuizResult[]

  @@index([createdAt])
  @@index([role])
  @@map("users")
}

model Portfolio {
  id               String              @id @default(cuid())
  userId           String
  title            String              @default("Mon Portfolio")
  bio              String?
  headline         String?
  template         PortfolioTemplate   @default(CLASSIC)
  themeColor       String?
  avatarUrl        String?
  bannerUrl        String?
  projects         Json?
  experiences      Json?
  education        Json?
  certifications   Json?
  skills           String[]
  languages        String[]
  interests        String[]
  sections         String[]
  socialLinks      Json?
  achievements     Json?
  publishedAt      DateTime?
  updatedAt        DateTime            @updatedAt
  createdAt        DateTime            @default(now())
  
  // Relations
  user             User                @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("portfolios")
}

model JobPosting {
  id               String              @id @default(cuid())
  companyName      String
  userId           String
  title            String
  description      String
  location         String?
  domains          Domain[]
  skills           String[]
  salaryMin        Float?
  salaryMax        Float?
  currency         String              @default("FCFA")
  type             JobType
  workMode         WorkMode
  experienceLevel  Difficulty?
  createdAt        DateTime            @default(now())
  updatedAt        DateTime            @updatedAt
  isActive         Boolean             @default(true)
  metadata         Json?
  
  // Relations
  user             User                @relation("UserJobPostings", fields: [userId], references: [id], onDelete: Cascade)
  applications     Application[]       @relation("JobApplications")
  jobQuizzes       JobQuiz[]

  @@map("job_postings")
} 

model Application {
  id               String              @id @default(cuid())
  userId           String
  jobId            String
  coverLetter      String?
  portfolioUrl     String?
  resumeUrl        String?
  status           String
  score            Int?
  reportUrl        String?
  createdAt        DateTime            @default(now())
  updatedAt        DateTime            @updatedAt
  
  // Relations
  user             User                @relation("UserApplications", fields: [userId], references: [id], onDelete: Cascade)
  job              JobPosting          @relation("JobApplications", fields: [jobId], references: [id], onDelete: Cascade)

  @@map("applications")
}

model Subscription {
  id                   String            @id @default(cuid())
  userId               String            @unique
  tier                 SubscriptionTier  @default(FREE)
  startDate            DateTime          @default(now())
  endDate              DateTime?
  isActive             Boolean           @default(true)
  stripeCustomerId     String?
  stripeSubscriptionId String?
  features             Json?
  
  // Relations
  user                 User              @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([isActive])
  @@index([endDate])
  @@map("subscriptions")
}

model Quiz {
  id               String              @id @default(cuid())
  title            String
  description      String?
  image            String?
  type             QuizType
  domain           Domain
  questions        Json
  difficulty       Difficulty          @default(JUNIOR)
  duration         Int
  totalPoints      Int
  company          String
  technology       String[]
  createdAt        DateTime            @default(now())
  updatedAt        DateTime            @updatedAt
  
  // Relations
  results          QuizResult[]

  @@index([type])
  @@index([difficulty])
  @@map("quizzes")
}

// JobQuiz contient maintenant tous les détails du quiz + la relation au job
model JobQuiz {
  id               String              @id @default(cuid())
  
  // Champs du quiz (mêmes que le modèle Quiz)
  title            String
  description      String?
  image            String?
  type             QuizType
  domain           Domain
  questions        Json
  difficulty       Difficulty          @default(JUNIOR)
  duration         Int
  totalPoints      Int
  company          String
  technology       String[]
  createdAt        DateTime            @default(now())
  updatedAt        DateTime            @updatedAt
  settings         Json?
  
  // Relations
  jobPostingId     String
  jobPosting       JobPosting          @relation(fields: [jobPostingId], references: [id], onDelete: Cascade)
  results          JobQuizResult[]

  @@index([type])
  @@index([difficulty])
  @@index([jobPostingId])
  @@map("job_quizzes")
} 

// Résultats spécifiques aux JobQuiz
model JobQuizResult {
  id               String              @id @default(cuid())
  userId           String
  jobQuizId        String
  score            Float
  answers          Json
  analysis         String
  duration         Int?
  completedAt      DateTime            @default(now())
  
  // Relations
  user             User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  jobQuiz          JobQuiz             @relation(fields: [jobQuizId], references: [id], onDelete: Cascade)
  skillAnalysis    SkillAnalysis[]

  @@index([userId, completedAt])
  @@index([jobQuizId])
  @@index([score])
  @@index([completedAt])
  @@map("job_quiz_results")
}

model QuizResult {
  id               String              @id @default(cuid())
  userId           String
  quizId           String
  score            Float
  answers          Json
  analysis         String
  duration         Int?
  completedAt      DateTime            @default(now())
  
  // Relations
  user             User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  quiz             Quiz                @relation(fields: [quizId], references: [id], onDelete: Cascade)
  skillAnalysis    SkillAnalysis[]

  @@index([userId, completedAt])
  @@index([quizId])
  @@index([score])
  @@index([completedAt])
  @@map("quiz_results")
}

model SkillAnalysis {
  id               String              @id @default(cuid())
  userId           String
  quizResultId     String?
  jobQuizResultId  String?
  skills           Json
  aiFeedback       String?
  improvementTips  String[]
  analyzedAt       DateTime            @default(now())
  
  // Relations
  user             User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  quizResult       QuizResult?         @relation(fields: [quizResultId], references: [id], onDelete: Cascade)
  jobQuizResult    JobQuizResult?      @relation(fields: [jobQuizResultId], references: [id], onDelete: Cascade)

  @@index([userId, analyzedAt])
  @@index([quizResultId])
  @@index([jobQuizResultId])
  @@map("skill_analyses")
}

model ProgressTracking {
  id               String              @id @default(cuid())
  userId           String
  metric           String
  value            Float
  date             DateTime            @default(now())
  context          Json?
  
  // Relations
  user             User                @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, metric, date])
  @@index([date])
  @@map("progress_tracking")
}

model Recommendation {
  id               String              @id @default(cuid())
  userId           String
  source           String
  content          String
  vector           Json?
  relatedItems     Json?
  weight           Float               @default(1.0)
  viewed           Boolean             @default(false)
  createdAt        DateTime            @default(now())
  
  // Relations
  user             User                @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, viewed])
  @@index([createdAt])
  @@map("recommendations")
}

model ChatSession {
  id               String              @id @default(cuid())
  userId           String
  messages         Json
  sessionType      String
  startedAt        DateTime            @default(now())
  lastActivity     DateTime            @updatedAt
  feedback         Json?
  
  // Relations
  user             User                @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, lastActivity])
  @@map("chat_sessions")
}

model InterviewRoom {
  id               String              @id @default(cuid())
  userId           String
  roomType         InterviewRoomType
  roomData         Json
  participants     Json?
  startedAt        DateTime            @default(now())
  endedAt          DateTime?
  recordingUrl     String?
  
  // Relations
  user             User                @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, startedAt])
  @@map("interview_rooms")
}

model VoiceInterview {
  id               String              @id @default(cuid())
  userId           String
  technologies     String[]
  context          String
  duration         Int
  conversationId   String?
  transcription    Json?
  actualDuration   Int?
  status           String              @default("pending")
  startedAt        DateTime            @default(now())
  endedAt          DateTime?
  feedback         Json?
  score            Float?
  
  // Relations
  user             User                @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, startedAt])
  @@index([status])
  @@map("voice_interviews")
}